
import java.awt.*;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import static java.lang.Double.compare;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Dikshyanta Mulmi, Saurav Kandel, Sudhoj Kunwar, Solomon Biswokarma
 */
public class PharmaceuticalInfo extends javax.swing.JFrame {

    /**
     * Creates new form JavaExp
     */
    public PharmaceuticalInfo() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        statusBtnGrp = new javax.swing.ButtonGroup();
        currencyBtnGrp = new javax.swing.ButtonGroup();
        searchBtnGrp = new javax.swing.ButtonGroup();
        sortBtnGrp = new javax.swing.ButtonGroup();
        sidePanel = new javax.swing.JPanel();
        sideTabPanel = new javax.swing.JPanel();
        dashboardTab = new javax.swing.JPanel();
        dashboardLbl = new javax.swing.JLabel();
        dataEntryTab = new javax.swing.JPanel();
        dataEntryLbl = new javax.swing.JLabel();
        topHeadingPanel = new javax.swing.JPanel();
        titleLbl = new javax.swing.JLabel();
        titleSeparator = new javax.swing.JSeparator();
        viewerPanel = new javax.swing.JPanel();
        dashboardPanel = new javax.swing.JPanel();
        tableDisplayPanel = new javax.swing.JPanel();
        stockInformationTableScrollPane = new javax.swing.JScrollPane();
        stockInformationTable = new javax.swing.JTable();
        deleteBtn = new javax.swing.JButton();
        refreshBtn = new javax.swing.JButton();
        searchSortPanel = new javax.swing.JPanel();
        searchLbl = new javax.swing.JLabel();
        searchTxtFld = new javax.swing.JTextField();
        searchComBox = new javax.swing.JComboBox<>();
        searchBtn = new javax.swing.JButton();
        sortByLbl = new javax.swing.JLabel();
        sortTypeRadBtn = new javax.swing.JRadioButton();
        sortRateRadBtn = new javax.swing.JRadioButton();
        sortBtn = new javax.swing.JButton();
        searchByLbl = new javax.swing.JLabel();
        searchRateRadBtn = new javax.swing.JRadioButton();
        searchTypeRadBtn = new javax.swing.JRadioButton();
        drugTypeAvailabilityLbl = new javax.swing.JLabel();
        availabilityBtn = new javax.swing.JButton();
        availabilityComBox = new javax.swing.JComboBox<>();
        dataEntryPanel = new javax.swing.JPanel();
        dataEntryFirstInfoPanel = new javax.swing.JPanel();
        drugIdLbl = new javax.swing.JLabel();
        drugIdTxtFld = new javax.swing.JTextField();
        drugNameLbl = new javax.swing.JLabel();
        drugNameTxtFld = new javax.swing.JTextField();
        companyLbl = new javax.swing.JLabel();
        companyTxtFld = new javax.swing.JTextField();
        manufacturedLbl = new javax.swing.JLabel();
        manufacturedPanel = new javax.swing.JPanel();
        manufacturedDayComBox = new javax.swing.JComboBox<>();
        manufacturedMonthComBox = new javax.swing.JComboBox<>();
        manufacturedYearComBox = new javax.swing.JComboBox<>();
        expirationLbl = new javax.swing.JLabel();
        expirationPanel = new javax.swing.JPanel();
        expirationDayComBox = new javax.swing.JComboBox<>();
        expirationMonthComBox = new javax.swing.JComboBox<>();
        expirationYearComBox = new javax.swing.JComboBox<>();
        statusLbl = new javax.swing.JLabel();
        statusPanel = new javax.swing.JPanel();
        sampleRadBtn = new javax.swing.JRadioButton();
        regularRadBtn = new javax.swing.JRadioButton();
        statusValidLbl = new javax.swing.JLabel();
        quantityLbl = new javax.swing.JLabel();
        quantityTxtFld = new javax.swing.JTextField();
        unitsLbl = new javax.swing.JLabel();
        drugIdValidLbl = new javax.swing.JLabel();
        drugNameValidLbl = new javax.swing.JLabel();
        companyValidLbl = new javax.swing.JLabel();
        manufacturedValidLbl = new javax.swing.JLabel();
        expirationValidLbl = new javax.swing.JLabel();
        quantityValidLbl = new javax.swing.JLabel();
        dataEntrySecondInfoPanel = new javax.swing.JPanel();
        marketPriceLbl = new javax.swing.JLabel();
        marketPriceTxtFld = new javax.swing.JTextField();
        currencyLbl = new javax.swing.JLabel();
        currencyPanel = new javax.swing.JPanel();
        inrRadBtn = new javax.swing.JRadioButton();
        usdRadBtn = new javax.swing.JRadioButton();
        nrsRadBtn = new javax.swing.JRadioButton();
        otherRadBtn = new javax.swing.JRadioButton();
        currencyExchangeRateLbl = new javax.swing.JLabel();
        currencyExchangeRateComBox = new javax.swing.JComboBox<>();
        currencyExchangeRateTxtFld = new javax.swing.JTextField();
        rateLbl = new javax.swing.JLabel();
        rateTxtFld = new javax.swing.JTextField();
        typeLbl = new javax.swing.JLabel();
        typeComBox = new javax.swing.JComboBox<>();
        salesLbl = new javax.swing.JLabel();
        salesPanel = new javax.swing.JPanel();
        internationalChkBox = new javax.swing.JCheckBox();
        nationwideChkBox = new javax.swing.JCheckBox();
        localChkBox = new javax.swing.JCheckBox();
        storeClearBtnPanel = new javax.swing.JPanel();
        storeBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        marketPriceValidLbl = new javax.swing.JLabel();
        currencyExchangeRateValidLbl = new javax.swing.JLabel();
        rateValidLbl = new javax.swing.JLabel();
        typeValidLbl = new javax.swing.JLabel();
        salesValidLbl = new javax.swing.JLabel();
        firstGapPanel = new javax.swing.JPanel();
        middleGapPanel = new javax.swing.JPanel();
        lastGapPanel = new javax.swing.JPanel();
        topMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenuItm = new javax.swing.JMenuItem();
        menuItmSeparator1 = new javax.swing.JPopupMenu.Separator();
        openMenuItm = new javax.swing.JMenuItem();
        menuItmSeparator2 = new javax.swing.JPopupMenu.Separator();
        exportMenuItm = new javax.swing.JMenuItem();
        menuItmSeparator3 = new javax.swing.JPopupMenu.Separator();
        exitMenuItm = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        userManualMenuItm = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Pharmaceutical Information System");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                PharmaceuticalInfo.this.windowClosing(evt);
            }
        });

        sidePanel.setBackground(new java.awt.Color(10, 75, 95));

        sideTabPanel.setBackground(new java.awt.Color(10, 75, 95));
        sideTabPanel.setLayout(new java.awt.GridLayout(0, 1, 0, 5));

        dashboardTab.setBackground(new java.awt.Color(225, 255, 225));

        dashboardLbl.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        dashboardLbl.setForeground(new java.awt.Color(0, 0, 0));
        dashboardLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dashboardLbl.setText("DASHBOARD");
        dashboardLbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                dashboardLblMousePressed(evt);
            }
        });

        javax.swing.GroupLayout dashboardTabLayout = new javax.swing.GroupLayout(dashboardTab);
        dashboardTab.setLayout(dashboardTabLayout);
        dashboardTabLayout.setHorizontalGroup(
            dashboardTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dashboardLbl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
        );
        dashboardTabLayout.setVerticalGroup(
            dashboardTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dashboardLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );

        sideTabPanel.add(dashboardTab);

        dataEntryTab.setBackground(new java.awt.Color(0, 130, 145));

        dataEntryLbl.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        dataEntryLbl.setForeground(new java.awt.Color(204, 204, 255));
        dataEntryLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dataEntryLbl.setText("DATA ENTRY");
        dataEntryLbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                dataEntryLblMousePressed(evt);
            }
        });

        javax.swing.GroupLayout dataEntryTabLayout = new javax.swing.GroupLayout(dataEntryTab);
        dataEntryTab.setLayout(dataEntryTabLayout);
        dataEntryTabLayout.setHorizontalGroup(
            dataEntryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dataEntryLbl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
        );
        dataEntryTabLayout.setVerticalGroup(
            dataEntryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dataEntryLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );

        sideTabPanel.add(dataEntryTab);

        javax.swing.GroupLayout sidePanelLayout = new javax.swing.GroupLayout(sidePanel);
        sidePanel.setLayout(sidePanelLayout);
        sidePanelLayout.setHorizontalGroup(
            sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sideTabPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        sidePanelLayout.setVerticalGroup(
            sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidePanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(sideTabPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        topHeadingPanel.setBackground(new java.awt.Color(65, 105, 145));

        titleLbl.setFont(new java.awt.Font("Segoe UI Light", 1, 24)); // NOI18N
        titleLbl.setForeground(new java.awt.Color(204, 204, 255));
        titleLbl.setText("PHARMACEUTICAL INFORMATION SYSTEM");

        titleSeparator.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout topHeadingPanelLayout = new javax.swing.GroupLayout(topHeadingPanel);
        topHeadingPanel.setLayout(topHeadingPanelLayout);
        topHeadingPanelLayout.setHorizontalGroup(
            topHeadingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topHeadingPanelLayout.createSequentialGroup()
                .addGap(324, 324, 324)
                .addGroup(topHeadingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titleSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(titleLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(453, Short.MAX_VALUE))
        );
        topHeadingPanelLayout.setVerticalGroup(
            topHeadingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topHeadingPanelLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(titleLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(titleSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        viewerPanel.setBackground(new java.awt.Color(225, 255, 225));

        dashboardPanel.setBackground(new java.awt.Color(225, 255, 255));
        dashboardPanel.setOpaque(false);
        dashboardPanel.setPreferredSize(new java.awt.Dimension(970, 350));

        tableDisplayPanel.setOpaque(false);

        stockInformationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Drug ID", "Drug Name", "Company", "Manufactured", "Expiration", "Rate(NRs)", "Type", "Status", "Sales", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        stockInformationTable.setOpaque(false);
        stockInformationTable.getTableHeader().setReorderingAllowed(false);
        stockInformationTableScrollPane.setViewportView(stockInformationTable);
        if (stockInformationTable.getColumnModel().getColumnCount() > 0) {
            stockInformationTable.getColumnModel().getColumn(0).setResizable(false);
            stockInformationTable.getColumnModel().getColumn(0).setPreferredWidth(25);
            stockInformationTable.getColumnModel().getColumn(1).setResizable(false);
            stockInformationTable.getColumnModel().getColumn(1).setPreferredWidth(100);
            stockInformationTable.getColumnModel().getColumn(2).setResizable(false);
            stockInformationTable.getColumnModel().getColumn(2).setPreferredWidth(120);
            stockInformationTable.getColumnModel().getColumn(3).setResizable(false);
            stockInformationTable.getColumnModel().getColumn(3).setPreferredWidth(50);
            stockInformationTable.getColumnModel().getColumn(4).setResizable(false);
            stockInformationTable.getColumnModel().getColumn(4).setPreferredWidth(50);
            stockInformationTable.getColumnModel().getColumn(5).setResizable(false);
            stockInformationTable.getColumnModel().getColumn(6).setResizable(false);
            stockInformationTable.getColumnModel().getColumn(6).setPreferredWidth(40);
            stockInformationTable.getColumnModel().getColumn(7).setResizable(false);
            stockInformationTable.getColumnModel().getColumn(7).setPreferredWidth(35);
            stockInformationTable.getColumnModel().getColumn(8).setResizable(false);
            stockInformationTable.getColumnModel().getColumn(8).setPreferredWidth(20);
            stockInformationTable.getColumnModel().getColumn(9).setResizable(false);
            stockInformationTable.getColumnModel().getColumn(9).setPreferredWidth(30);
        }

        deleteBtn.setText("Delete Selected Data");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        refreshBtn.setText("Refresh");
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tableDisplayPanelLayout = new javax.swing.GroupLayout(tableDisplayPanel);
        tableDisplayPanel.setLayout(tableDisplayPanelLayout);
        tableDisplayPanelLayout.setHorizontalGroup(
            tableDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tableDisplayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tableDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(stockInformationTableScrollPane)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tableDisplayPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(refreshBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteBtn)))
                .addContainerGap())
        );
        tableDisplayPanelLayout.setVerticalGroup(
            tableDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tableDisplayPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(stockInformationTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tableDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteBtn)
                    .addComponent(refreshBtn))
                .addGap(4, 4, 4))
        );

        searchSortPanel.setOpaque(false);

        searchLbl.setText("Search");

        searchTxtFld.setEditable(false);
        searchTxtFld.setFocusable(false);
        searchTxtFld.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                searchTxtFldMousePressed(evt);
            }
        });
        searchTxtFld.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchTxtFldKeyPressed(evt);
            }
        });

        searchComBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "----Select----", "Buccal", "Capsules", "Drops", "Implants", "Inhalers", "Injections", "Liquid", "Patches", "Tablet", "Topical" }));
        searchComBox.setVisible(false);

        searchBtn.setText("Search Drug");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        sortByLbl.setText("Sort By");

        sortBtnGrp.add(sortTypeRadBtn);
        sortTypeRadBtn.setText("Type");
        sortTypeRadBtn.setActionCommand("Type");

        sortBtnGrp.add(sortRateRadBtn);
        sortRateRadBtn.setSelected(true);
        sortRateRadBtn.setText("Rate(Nrs)");
        sortRateRadBtn.setActionCommand("Rate");

        sortBtn.setText("Sort");
        sortBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortBtnActionPerformed(evt);
            }
        });

        searchByLbl.setText("By");

        searchBtnGrp.add(searchRateRadBtn);
        searchRateRadBtn.setSelected(true);
        searchRateRadBtn.setText("Rate(NRs)");
        searchRateRadBtn.setActionCommand("Rate");
        searchRateRadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchRateRadBtnActionPerformed(evt);
            }
        });

        searchBtnGrp.add(searchTypeRadBtn);
        searchTypeRadBtn.setText("Type");
        searchTypeRadBtn.setActionCommand("Type");
        searchTypeRadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTypeRadBtnActionPerformed(evt);
            }
        });

        drugTypeAvailabilityLbl.setText("Drug Type");

        availabilityBtn.setText("Drug Availability");
        availabilityBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availabilityBtnActionPerformed(evt);
            }
        });

        availabilityComBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "----Select----", "Buccal", "Capsules", "Drops", "Implants", "Inhalers", "Injections", "Liquid", "Patches", "Tablet", "Topical" }));

        javax.swing.GroupLayout searchSortPanelLayout = new javax.swing.GroupLayout(searchSortPanel);
        searchSortPanel.setLayout(searchSortPanelLayout);
        searchSortPanelLayout.setHorizontalGroup(
            searchSortPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchSortPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchComBox, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchByLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchRateRadBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchTypeRadBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(drugTypeAvailabilityLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(availabilityComBox, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(availabilityBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sortByLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sortRateRadBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sortTypeRadBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sortBtn)
                .addContainerGap())
        );
        searchSortPanelLayout.setVerticalGroup(
            searchSortPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchSortPanelLayout.createSequentialGroup()
                .addContainerGap(8, Short.MAX_VALUE)
                .addGroup(searchSortPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchLbl)
                    .addComponent(searchTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchComBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBtn)
                    .addComponent(sortByLbl)
                    .addComponent(sortTypeRadBtn)
                    .addComponent(sortRateRadBtn)
                    .addComponent(sortBtn)
                    .addComponent(searchByLbl)
                    .addComponent(searchRateRadBtn)
                    .addComponent(searchTypeRadBtn)
                    .addComponent(drugTypeAvailabilityLbl)
                    .addComponent(availabilityBtn)
                    .addComponent(availabilityComBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout dashboardPanelLayout = new javax.swing.GroupLayout(dashboardPanel);
        dashboardPanel.setLayout(dashboardPanelLayout);
        dashboardPanelLayout.setHorizontalGroup(
            dashboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tableDisplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(dashboardPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchSortPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        dashboardPanelLayout.setVerticalGroup(
            dashboardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dashboardPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchSortPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tableDisplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        dataEntryPanel.setBackground(new java.awt.Color(225, 255, 225));
        dataEntryPanel.setPreferredSize(new java.awt.Dimension(970, 350));
        dataEntryPanel.setVisible(false);
        dataEntryPanel.setOpaque(false);

        dataEntryFirstInfoPanel.setOpaque(false);

        drugIdLbl.setText("Drug ID");

        drugNameLbl.setText("Drug Name");

        companyLbl.setText("Company");

        manufacturedLbl.setText("Manufactured");

        manufacturedPanel.setOpaque(false);

        manufacturedDayComBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Day", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32" }));

        manufacturedMonthComBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Month", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" }));

        manufacturedYearComBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Year", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021" }));

        javax.swing.GroupLayout manufacturedPanelLayout = new javax.swing.GroupLayout(manufacturedPanel);
        manufacturedPanel.setLayout(manufacturedPanelLayout);
        manufacturedPanelLayout.setHorizontalGroup(
            manufacturedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manufacturedPanelLayout.createSequentialGroup()
                .addComponent(manufacturedDayComBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(manufacturedMonthComBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(manufacturedYearComBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        manufacturedPanelLayout.setVerticalGroup(
            manufacturedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manufacturedPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(manufacturedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(manufacturedDayComBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(manufacturedMonthComBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(manufacturedYearComBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        expirationLbl.setText("Expiration");

        expirationPanel.setOpaque(false);

        expirationDayComBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Day", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32" }));

        expirationMonthComBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Month", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" }));

        expirationYearComBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Year", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030", "2031", "2032", "2033", "2034", "2035", "2036", "2037", "2038", "2039", "2040", "2041", "2042", "2043", "2044", "2045" }));

        javax.swing.GroupLayout expirationPanelLayout = new javax.swing.GroupLayout(expirationPanel);
        expirationPanel.setLayout(expirationPanelLayout);
        expirationPanelLayout.setHorizontalGroup(
            expirationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(expirationPanelLayout.createSequentialGroup()
                .addComponent(expirationDayComBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(expirationMonthComBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(expirationYearComBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        expirationPanelLayout.setVerticalGroup(
            expirationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(expirationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(expirationDayComBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(expirationMonthComBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(expirationYearComBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        statusLbl.setText("Status");

        statusPanel.setOpaque(false);

        statusBtnGrp.add(sampleRadBtn);
        sampleRadBtn.setText("Sample");
        sampleRadBtn.setActionCommand("Sample");

        statusBtnGrp.add(regularRadBtn);
        regularRadBtn.setText("Regular");
        regularRadBtn.setActionCommand("Regular");

        statusValidLbl.setForeground(new java.awt.Color(255, 0, 51));

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(statusPanelLayout.createSequentialGroup()
                        .addComponent(sampleRadBtn)
                        .addGap(18, 18, 18)
                        .addComponent(regularRadBtn))
                    .addComponent(statusValidLbl))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusValidLbl)
                .addGap(0, 0, 0)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sampleRadBtn)
                    .addComponent(regularRadBtn))
                .addGap(0, 6, Short.MAX_VALUE))
        );

        quantityLbl.setText("Quantity");

        quantityTxtFld.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                quantityTxtFldKeyPressed(evt);
            }
        });

        unitsLbl.setText("Units");

        drugIdValidLbl.setForeground(new java.awt.Color(255, 0, 51));

        drugNameValidLbl.setForeground(new java.awt.Color(255, 0, 51));

        companyValidLbl.setForeground(new java.awt.Color(255, 0, 51));

        manufacturedValidLbl.setForeground(new java.awt.Color(255, 0, 51));

        expirationValidLbl.setForeground(new java.awt.Color(255, 0, 51));

        quantityValidLbl.setForeground(new java.awt.Color(255, 0, 51));

        javax.swing.GroupLayout dataEntryFirstInfoPanelLayout = new javax.swing.GroupLayout(dataEntryFirstInfoPanel);
        dataEntryFirstInfoPanel.setLayout(dataEntryFirstInfoPanelLayout);
        dataEntryFirstInfoPanelLayout.setHorizontalGroup(
            dataEntryFirstInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dataEntryFirstInfoPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(dataEntryFirstInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(drugIdLbl, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(drugNameLbl, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(companyLbl, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(manufacturedLbl, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(expirationLbl, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(statusLbl, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(quantityLbl, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(dataEntryFirstInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(drugIdValidLbl)
                    .addComponent(drugIdTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(drugNameTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(companyTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(dataEntryFirstInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(manufacturedPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(expirationValidLbl)
                        .addGroup(dataEntryFirstInfoPanelLayout.createSequentialGroup()
                            .addComponent(quantityTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(unitsLbl))
                        .addComponent(expirationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(quantityValidLbl)
                        .addComponent(statusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(drugNameValidLbl)
                    .addComponent(companyValidLbl)
                    .addComponent(manufacturedValidLbl))
                .addContainerGap())
        );
        dataEntryFirstInfoPanelLayout.setVerticalGroup(
            dataEntryFirstInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dataEntryFirstInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(drugIdValidLbl)
                .addGap(0, 0, 0)
                .addGroup(dataEntryFirstInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(dataEntryFirstInfoPanelLayout.createSequentialGroup()
                        .addGroup(dataEntryFirstInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(dataEntryFirstInfoPanelLayout.createSequentialGroup()
                                .addGroup(dataEntryFirstInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(drugIdTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(drugIdLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(drugNameValidLbl)
                                .addGap(0, 0, 0)
                                .addGroup(dataEntryFirstInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(drugNameTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(drugNameLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(companyValidLbl)
                                .addGap(0, 0, 0)
                                .addGroup(dataEntryFirstInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(companyTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(companyLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(manufacturedValidLbl)
                                .addGap(0, 0, 0)
                                .addGroup(dataEntryFirstInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(manufacturedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(manufacturedLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(expirationValidLbl)
                                .addGap(3, 3, 3)
                                .addComponent(expirationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(expirationLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addComponent(statusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(statusLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addComponent(quantityValidLbl)
                .addGap(0, 0, 0)
                .addGroup(dataEntryFirstInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quantityTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unitsLbl)
                    .addComponent(quantityLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        dataEntrySecondInfoPanel.setOpaque(false);

        marketPriceLbl.setText("Market Price");

        marketPriceTxtFld.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                marketPriceTxtFldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                marketPriceTxtFldKeyReleased(evt);
            }
        });

        currencyLbl.setText("Currency");

        currencyPanel.setOpaque(false);

        currencyBtnGrp.add(inrRadBtn);
        inrRadBtn.setText("INR");
        inrRadBtn.setActionCommand("INR");
        inrRadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inrRadBtnActionPerformed(evt);
            }
        });

        currencyBtnGrp.add(usdRadBtn);
        usdRadBtn.setText("USD");
        usdRadBtn.setActionCommand("USD");
        usdRadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usdRadBtnActionPerformed(evt);
            }
        });

        currencyBtnGrp.add(nrsRadBtn);
        nrsRadBtn.setSelected(true);
        nrsRadBtn.setText("NRs");
        nrsRadBtn.setActionCommand("NRs");
        nrsRadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nrsRadBtnActionPerformed(evt);
            }
        });

        currencyBtnGrp.add(otherRadBtn);
        otherRadBtn.setText("Other");
        otherRadBtn.setActionCommand("Other");
        otherRadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                otherRadBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout currencyPanelLayout = new javax.swing.GroupLayout(currencyPanel);
        currencyPanel.setLayout(currencyPanelLayout);
        currencyPanelLayout.setHorizontalGroup(
            currencyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(currencyPanelLayout.createSequentialGroup()
                .addComponent(nrsRadBtn)
                .addGap(18, 18, 18)
                .addComponent(inrRadBtn)
                .addGap(18, 18, 18)
                .addComponent(usdRadBtn)
                .addGap(18, 18, 18)
                .addComponent(otherRadBtn)
                .addGap(18, 18, 18))
        );
        currencyPanelLayout.setVerticalGroup(
            currencyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, currencyPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(currencyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inrRadBtn)
                    .addComponent(usdRadBtn)
                    .addComponent(nrsRadBtn)
                    .addComponent(otherRadBtn)))
        );

        currencyExchangeRateLbl.setText("Currency Exchange Rate");

        currencyExchangeRateComBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "1.6", "117.17" }));
        currencyExchangeRateComBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currencyExchangeRateComBoxActionPerformed(evt);
            }
        });

        currencyExchangeRateTxtFld.setVisible(false);
        currencyExchangeRateTxtFld.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                currencyExchangeRateTxtFldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                currencyExchangeRateTxtFldKeyReleased(evt);
            }
        });

        rateLbl.setText("Rate(NRs)");

        rateTxtFld.setEditable(false);
        rateTxtFld.setFocusable(false);
        rateTxtFld.setRequestFocusEnabled(false);
        rateTxtFld.setVerifyInputWhenFocusTarget(false);

        typeLbl.setText("Type");

        typeComBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "----Select----", "Buccal", "Capsules", "Drops", "Implants", "Inhalers", "Injections", "Liquid", "Patches", "Tablet", "Topical" }));

        salesLbl.setText("Sales");

        salesPanel.setOpaque(false);

        internationalChkBox.setText("International (I)");

        nationwideChkBox.setText("Nationwise (N)");

        localChkBox.setText("Local (L)");

        javax.swing.GroupLayout salesPanelLayout = new javax.swing.GroupLayout(salesPanel);
        salesPanel.setLayout(salesPanelLayout);
        salesPanelLayout.setHorizontalGroup(
            salesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(salesPanelLayout.createSequentialGroup()
                .addComponent(internationalChkBox)
                .addGap(18, 18, 18)
                .addComponent(nationwideChkBox)
                .addGap(18, 18, 18)
                .addComponent(localChkBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        salesPanelLayout.setVerticalGroup(
            salesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, salesPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(salesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(internationalChkBox)
                    .addComponent(nationwideChkBox)
                    .addComponent(localChkBox)))
        );

        storeClearBtnPanel.setOpaque(false);

        storeBtn.setText("Store");
        storeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storeBtnActionPerformed(evt);
            }
        });

        clearBtn.setText("Clear");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout storeClearBtnPanelLayout = new javax.swing.GroupLayout(storeClearBtnPanel);
        storeClearBtnPanel.setLayout(storeClearBtnPanelLayout);
        storeClearBtnPanelLayout.setHorizontalGroup(
            storeClearBtnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(storeClearBtnPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(storeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        storeClearBtnPanelLayout.setVerticalGroup(
            storeClearBtnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, storeClearBtnPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(storeClearBtnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(storeBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(clearBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        marketPriceValidLbl.setForeground(new java.awt.Color(255, 0, 0));

        currencyExchangeRateValidLbl.setForeground(new java.awt.Color(255, 0, 0));

        rateValidLbl.setForeground(new java.awt.Color(255, 0, 0));

        typeValidLbl.setForeground(new java.awt.Color(255, 0, 0));

        salesValidLbl.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout dataEntrySecondInfoPanelLayout = new javax.swing.GroupLayout(dataEntrySecondInfoPanel);
        dataEntrySecondInfoPanel.setLayout(dataEntrySecondInfoPanelLayout);
        dataEntrySecondInfoPanelLayout.setHorizontalGroup(
            dataEntrySecondInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dataEntrySecondInfoPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(dataEntrySecondInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(marketPriceLbl, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(currencyLbl, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(salesLbl, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(typeLbl, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(rateLbl, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(currencyExchangeRateLbl, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(dataEntrySecondInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rateValidLbl)
                    .addComponent(marketPriceValidLbl)
                    .addComponent(storeClearBtnPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(typeComBox, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(salesValidLbl)
                    .addComponent(rateTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(currencyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(marketPriceTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(typeValidLbl)
                    .addGroup(dataEntrySecondInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(currencyExchangeRateValidLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(dataEntrySecondInfoPanelLayout.createSequentialGroup()
                            .addComponent(currencyExchangeRateComBox, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(currencyExchangeRateTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(salesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49))
        );
        dataEntrySecondInfoPanelLayout.setVerticalGroup(
            dataEntrySecondInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dataEntrySecondInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(marketPriceValidLbl)
                .addGap(0, 0, 0)
                .addGroup(dataEntrySecondInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(marketPriceTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(marketPriceLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(dataEntrySecondInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(currencyLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(currencyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(6, 6, 6)
                .addComponent(currencyExchangeRateValidLbl)
                .addGap(0, 0, 0)
                .addGroup(dataEntrySecondInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currencyExchangeRateComBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(currencyExchangeRateLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(currencyExchangeRateTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rateValidLbl)
                .addGap(0, 0, 0)
                .addGroup(dataEntrySecondInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rateTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rateLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(typeValidLbl)
                .addGap(0, 0, 0)
                .addGroup(dataEntrySecondInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(typeComBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(typeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(salesValidLbl)
                .addGroup(dataEntrySecondInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(salesLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(salesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(storeClearBtnPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        firstGapPanel.setOpaque(false);

        javax.swing.GroupLayout firstGapPanelLayout = new javax.swing.GroupLayout(firstGapPanel);
        firstGapPanel.setLayout(firstGapPanelLayout);
        firstGapPanelLayout.setHorizontalGroup(
            firstGapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 38, Short.MAX_VALUE)
        );
        firstGapPanelLayout.setVerticalGroup(
            firstGapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 280, Short.MAX_VALUE)
        );

        middleGapPanel.setOpaque(false);

        javax.swing.GroupLayout middleGapPanelLayout = new javax.swing.GroupLayout(middleGapPanel);
        middleGapPanel.setLayout(middleGapPanelLayout);
        middleGapPanelLayout.setHorizontalGroup(
            middleGapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 62, Short.MAX_VALUE)
        );
        middleGapPanelLayout.setVerticalGroup(
            middleGapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 280, Short.MAX_VALUE)
        );

        lastGapPanel.setOpaque(false);

        javax.swing.GroupLayout lastGapPanelLayout = new javax.swing.GroupLayout(lastGapPanel);
        lastGapPanel.setLayout(lastGapPanelLayout);
        lastGapPanelLayout.setHorizontalGroup(
            lastGapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 39, Short.MAX_VALUE)
        );
        lastGapPanelLayout.setVerticalGroup(
            lastGapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 279, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout dataEntryPanelLayout = new javax.swing.GroupLayout(dataEntryPanel);
        dataEntryPanel.setLayout(dataEntryPanelLayout);
        dataEntryPanelLayout.setHorizontalGroup(
            dataEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dataEntryPanelLayout.createSequentialGroup()
                .addComponent(firstGapPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(dataEntryFirstInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(middleGapPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(dataEntrySecondInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(lastGapPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        dataEntryPanelLayout.setVerticalGroup(
            dataEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dataEntryPanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(dataEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lastGapPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dataEntrySecondInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(dataEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(middleGapPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dataEntryFirstInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(firstGapPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(61, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout viewerPanelLayout = new javax.swing.GroupLayout(viewerPanel);
        viewerPanel.setLayout(viewerPanelLayout);
        viewerPanelLayout.setHorizontalGroup(
            viewerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dataEntryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1079, Short.MAX_VALUE)
            .addGroup(viewerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(dashboardPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 1079, Short.MAX_VALUE))
        );
        viewerPanelLayout.setVerticalGroup(
            viewerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dataEntryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
            .addGroup(viewerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(dashboardPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE))
        );

        topMenuBar.setToolTipText("");

        fileMenu.setText("File");

        newMenuItm.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        newMenuItm.setText("New");
        newMenuItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuItmActionPerformed(evt);
            }
        });
        fileMenu.add(newMenuItm);
        fileMenu.add(menuItmSeparator1);

        openMenuItm.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        openMenuItm.setText("Open");
        openMenuItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItmActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItm);
        fileMenu.add(menuItmSeparator2);

        exportMenuItm.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        exportMenuItm.setText("Export");
        exportMenuItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportMenuItmActionPerformed(evt);
            }
        });
        fileMenu.add(exportMenuItm);
        fileMenu.add(menuItmSeparator3);

        exitMenuItm.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        exitMenuItm.setText("Exit");
        exitMenuItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItmActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItm);

        topMenuBar.add(fileMenu);

        helpMenu.setText("Help");

        userManualMenuItm.setText("User Manual");
        userManualMenuItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userManualMenuItmActionPerformed(evt);
            }
        });
        helpMenu.add(userManualMenuItm);

        topMenuBar.add(helpMenu);

        setJMenuBar(topMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(sidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(viewerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(topHeadingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(topHeadingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(viewerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void quantityTxtFldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quantityTxtFldKeyPressed
        // the code below only allows integer values to be entered in the textfield
        char key = evt.getKeyChar();
        int c = evt.getKeyCode();
        if (Character.isDigit(key) || c == 8) {
            quantityTxtFld.setEditable(true);
        } else {
            quantityTxtFld.setEditable(false);
        }
    }//GEN-LAST:event_quantityTxtFldKeyPressed

    private void marketPriceTxtFldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_marketPriceTxtFldKeyPressed
        // the code below checks for the validation of the key into the textfield
        keyPressedValidation(evt, marketPriceTxtFld);
    }//GEN-LAST:event_marketPriceTxtFldKeyPressed

    private void marketPriceTxtFldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_marketPriceTxtFldKeyReleased
        // the code below sets the value in the rateTxtFld
        String s = marketPriceTxtFld.getText();
        String currency = currencyBtnGrp.getSelection().getActionCommand();
        String value = currencyExchangeRateTxtFld.getText();
        String exchangeRate = String.valueOf(currencyExchangeRateComBox.getSelectedItem());
        double mp, exRate, rate;
        if (!s.isEmpty() && !currency.equals("Other")) {
            mp = Double.valueOf(s);
            exRate = Double.valueOf(exchangeRate);
            rate = mp * exRate;
            rateTxtFld.setText(String.format("%.3f", (double) rate));
        } else if (!s.isEmpty() && currency.equals("Other") && !value.isEmpty()) {
            mp = Double.valueOf(s);
            exRate = Double.valueOf(value);
            rate = mp * exRate;
            rateTxtFld.setText(String.format("%.3f", (double) rate));
        } else {
            rateTxtFld.setText("");
        }
    }//GEN-LAST:event_marketPriceTxtFldKeyReleased

    private void nrsRadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nrsRadBtnActionPerformed
        //the code below changes the state of exchangeCurrencyRateComBox and exchangeCurrencyRateTxtFld
        changeCurrencyExchangeState(0, false, true);
    }//GEN-LAST:event_nrsRadBtnActionPerformed

    private void inrRadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inrRadBtnActionPerformed
        //the code below changes the state of exchangeCurrencyRateComBox and exchangeCurrencyRateTxtFld
        changeCurrencyExchangeState(1, false, true);
    }//GEN-LAST:event_inrRadBtnActionPerformed

    private void usdRadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usdRadBtnActionPerformed
        //the code below changes the state of exchangeCurrencyRateComBox and exchangeCurrencyRateTxtFld
        changeCurrencyExchangeState(2, false, true);
    }//GEN-LAST:event_usdRadBtnActionPerformed

    private void otherRadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_otherRadBtnActionPerformed
        //the code below changes the state of exchangeCurrencyRateComBox and exchangeCurrencyRateTxtFld
        currencyExchangeRateComBox.setVisible(false);
        currencyExchangeRateTxtFld.setVisible(true);
        String marketPrice = marketPriceTxtFld.getText();
        String exchangeRate = currencyExchangeRateTxtFld.getText();
        double mp, exRate, rate;
        if (!marketPrice.isEmpty() && !exchangeRate.isEmpty()) {
            mp = Double.valueOf(marketPrice);
            exRate = Double.parseDouble(exchangeRate);
            rate = mp * exRate;
            rateTxtFld.setText(String.format("%.3f", (double) rate));
        } else {
            rateTxtFld.setText("");
        }
    }//GEN-LAST:event_otherRadBtnActionPerformed

    private void currencyExchangeRateComBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currencyExchangeRateComBoxActionPerformed
        /*the code below sets value to the rate as per the value of market price and 
        currency exchange rate selected value*/
        String marketPrice = marketPriceTxtFld.getText();
        int selectedIndex = currencyExchangeRateComBox.getSelectedIndex();
        double mp, exRate, rate;
        String exchangeRate;
        switch (selectedIndex) {
            case 0:
                nrsRadBtn.setSelected(true);
                break;
            case 1:
                inrRadBtn.setSelected(true);
                break;
            default:
                usdRadBtn.setSelected(true);
                break;
        }
        if (!marketPrice.isEmpty()) {
            mp = Double.valueOf(marketPrice);
            exchangeRate = String.valueOf(currencyExchangeRateComBox.getSelectedItem());
            exRate = Double.parseDouble(exchangeRate);
            rate = mp * exRate;
            rateTxtFld.setText(String.format("%.3f", (double) rate));
        }
    }//GEN-LAST:event_currencyExchangeRateComBoxActionPerformed

    private void currencyExchangeRateTxtFldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_currencyExchangeRateTxtFldKeyPressed
        //the code below restricts unsuitable value in currency exchange rate textfield
        keyPressedValidation(evt, currencyExchangeRateTxtFld);
    }//GEN-LAST:event_currencyExchangeRateTxtFldKeyPressed

    private void keyPressedValidation(KeyEvent evt, JTextField txtFld) {
        // the code below checks for the validation of the key into the textfield
        char key = evt.getKeyChar();
        int c = evt.getKeyCode();
        String s = txtFld.getText();
        if (Character.isDigit(key) || c == 8 || c == 46) {
            if ((s.trim().isEmpty() || s.contains(".")) && c == 46) {
                txtFld.setEditable(false);
            } else {
                txtFld.setEditable(true);
            }
        } else {
            txtFld.setEditable(false);
        }
    }

    private void currencyExchangeRateTxtFldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_currencyExchangeRateTxtFldKeyReleased
        // the code below sets value to the rate after key release event in currency Exchange Rate textfield 
        String s = marketPriceTxtFld.getText();
        String value = currencyExchangeRateTxtFld.getText();
        double mp, exRate, rate;
        if (!s.isEmpty() && !value.isEmpty()) {
            mp = Double.valueOf(s);
            exRate = Double.valueOf(value);
            rate = mp * exRate;
            rateTxtFld.setText(String.format("%.3f", (double) rate));
        } else {
            rateTxtFld.setText("");
        }
    }//GEN-LAST:event_currencyExchangeRateTxtFldKeyReleased

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        // the code below clear all the JComponent to its default view
        setDrugId("");
        setDrugName("");
        setCompany("");
        setManufacturedDay(0);
        setManufacturedMonth(0);
        setManufacturedYear(0);
        setExpirationDay(0);
        setExpirationMonth(0);
        setExpirationYear(0);
        statusBtnGrp.clearSelection();
        quantityTxtFld.setText("");
        marketPriceTxtFld.setText("");
        setCurrency(nrsRadBtn);
        setCurrencyExchangeRate(0);
        currencyExchangeRateTxtFld.setVisible(false);
        currencyExchangeRateComBox.setVisible(true);
        currencyExchangeRateTxtFld.setText("");
        rateTxtFld.setText("");
        setType(0);
        setSales(internationalChkBox, false);
        setSales(nationwideChkBox, false);
        setSales(localChkBox, false);
        setSort(sortTypeRadBtn);
        searchTxtFld.setText("");
        searchTxtFld.setVisible(true);
        setSearchOption(searchRateRadBtn);
        setSearch(0);
        searchComBox.setVisible(false);
        clearValidationWarning();
    }//GEN-LAST:event_clearBtnActionPerformed

    private void dashboardLblMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dashboardLblMousePressed
        // the code below highlights the dashboard tab
        dataEntryPanel.setVisible(false);
        dashboardPanel.setVisible(true);
        Color highlightBG = new Color(225, 255, 225);
        Color defaultBG = new Color(0, 130, 145);
        Color defaultFG = new Color(204, 204, 255);
        dashboardTab.setBackground(highlightBG);
        dashboardLbl.setForeground(Color.black);
        dataEntryTab.setBackground(defaultBG);
        dataEntryLbl.setForeground(defaultFG);
    }//GEN-LAST:event_dashboardLblMousePressed

    private void dataEntryLblMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dataEntryLblMousePressed
        //the code below highlights the dataentry tab
        dashboardPanel.setVisible(false);
        dataEntryPanel.setVisible(true);
        Color highlightBG = new Color(225, 255, 225);
        Color defaultBG = new Color(0, 130, 145);
        Color defaultFG = new Color(204, 204, 255);
        dashboardTab.setBackground(defaultBG);
        dashboardLbl.setForeground(defaultFG);
        dataEntryTab.setBackground(highlightBG);
        dataEntryLbl.setForeground(Color.black);
    }//GEN-LAST:event_dataEntryLblMousePressed

    private void searchTxtFldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTxtFldKeyPressed
        // the code below limits the value entered into the textfield
        keyPressedValidation(evt, searchTxtFld);
    }//GEN-LAST:event_searchTxtFldKeyPressed

    private void storeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_storeBtnActionPerformed
        // the code belo stores row to the table if all the data entered are valid
        if (!isTableEmpty()) {
            clearValidationWarning();
            if (!getDrugId().isEmpty()) {
                clearValidationWarning();
                if (!getDrugName().isEmpty()) {
                    clearValidationWarning();
                    if (!getCompany().isEmpty()) {
                        clearValidationWarning();
                        if (!isManufacturedEmpty()) {
                            clearValidationWarning();
                            if (!isExpirationEmpty()) {
                                clearValidationWarning();
                                if (!isStatusEmpty()) {
                                    clearValidationWarning();
                                    if (!getQuantity().isEmpty()) {
                                        clearValidationWarning();
                                        if (!getMarketPrice().isEmpty()) {
                                            clearValidationWarning();
                                            if (!getRate().isEmpty()) {
                                                clearValidationWarning();
                                                if (!isTypeEmpty()) {
                                                    clearValidationWarning();
                                                    if (!isSalesEmpty()) {
                                                        clearValidationWarning();
                                                        int rowCount = stockInformationTable.getRowCount();
                                                        int columnCount = stockInformationTable.getColumnCount();
                                                        int count = 0;
                                                        int row = 0;
                                                        boolean empty = false;
                                                        while (row < rowCount) {
                                                            if ((getStringValueAt(row, 0)).equals(getDrugId().toUpperCase())) {
                                                                count++;
                                                            }
                                                            row++;
                                                        }
                                                        if (count == 0) {
                                                            DefaultTableModel model = (DefaultTableModel) stockInformationTable.getModel();
                                                            model.addRow(new Object[]{null});
                                                            String drugId = getDrugId().toUpperCase();
                                                            String drugName = getDrugName();
                                                            String company = getCompany();
                                                            String manufactured = getManufacturedDay() + "-" + getManufacturedMonth() + "-" + getManufacturedYear().substring(2);
                                                            String expiration = getExpirationDay() + "-" + getExpirationMonth() + "-" + getExpirationYear().substring(2);
                                                            String status = getStatus();
                                                            Integer quantity = Integer.parseInt(getQuantity());
                                                            Double rate = Double.valueOf(getRate());
                                                            String type = getTypes();
                                                            String sales = getSales();
                                                            Object details[] = {drugId, drugName, company, manufactured, expiration, rate, type, status, sales, quantity};
                                                            String value;
                                                            row = 0;
                                                            do {
                                                                value = getStringValueAt(row, 0);
                                                                if (!value.isEmpty()) {
                                                                    row++;
                                                                } else {
                                                                    empty = true;
                                                                }
                                                            } while (row < rowCount && !empty);
                                                            for (int i = 0; i < columnCount; i++) {
                                                                setObjectValueAt(details[i], row, i);
                                                            }
                                                            JOptionPane.showMessageDialog(this, "Data Sucessfully Validated and Stored.", "Operation Success", JOptionPane.INFORMATION_MESSAGE);
                                                        } else {
                                                            JOptionPane.showMessageDialog(this, "Enter a Unique Drug ID", "Data Redundancy!", 0, null);
                                                        }
                                                    } else {
                                                        salesValidLbl.setText("*Sales Required");
                                                        JOptionPane.showMessageDialog(this, "Sales not selected.", "Data Validation Error", JOptionPane.WARNING_MESSAGE);
                                                    }
                                                } else {
                                                    typeValidLbl.setText("*Type Required");
                                                    JOptionPane.showMessageDialog(this, "Type not selected.", "Data Validation Error", JOptionPane.WARNING_MESSAGE);
                                                }
                                            } else {
                                                currencyExchangeRateValidLbl.setText("*Currency Exchange Rate Required");
                                                JOptionPane.showMessageDialog(this, "Currency Exchange Rate not entered.", "Data Validation Error", JOptionPane.WARNING_MESSAGE);
                                                if (getCurrency().equals("Other")) {
                                                    currencyExchangeRateTxtFld.requestFocusInWindow();
                                                }
                                            }
                                        } else {
                                            marketPriceValidLbl.setText("*Market Price Required");
                                            JOptionPane.showMessageDialog(this, "Market Price not entered.", "Data Validation Error", JOptionPane.WARNING_MESSAGE);
                                            marketPriceTxtFld.requestFocusInWindow();
                                        }
                                    } else {
                                        quantityValidLbl.setText("*Quantity Required");
                                        JOptionPane.showMessageDialog(this, "Quantity not entered.", "Data Validation Error", JOptionPane.WARNING_MESSAGE);
                                        quantityTxtFld.requestFocusInWindow();
                                    }
                                } else {
                                    statusValidLbl.setText("*Status Required");
                                    JOptionPane.showMessageDialog(this, "Status not selected.", "Data Validation Error", JOptionPane.WARNING_MESSAGE);
                                }
                            } else {
                                expirationValidLbl.setText("*Expiration Date Required");
                                JOptionPane.showMessageDialog(this, "Expiration not entered.", "Data Validation Error", JOptionPane.WARNING_MESSAGE);
                            }

                        } else {
                            JOptionPane.showMessageDialog(this, "Manufactured not entered", "Data Validation Error", JOptionPane.WARNING_MESSAGE);
                            manufacturedValidLbl.setText("*Manufactured Date Required");
                        }

                    } else {
                        companyValidLbl.setText("*Company Required");
                        JOptionPane.showMessageDialog(this, "Company not entered.", "Data Validation Error", JOptionPane.WARNING_MESSAGE);
                        companyTxtFld.requestFocusInWindow();
                    }

                } else {
                    drugNameValidLbl.setText("*Drug Name Required");
                    JOptionPane.showMessageDialog(this, "Drug Name not entered.", "Data Validation Error", JOptionPane.WARNING_MESSAGE);
                    drugNameTxtFld.requestFocusInWindow();
                }
            } else {
                drugIdValidLbl.setText("*Drug ID Required");
                JOptionPane.showMessageDialog(this, "Drug ID not entered.", "Data Validation Error", JOptionPane.WARNING_MESSAGE);
                drugIdTxtFld.requestFocusInWindow();
            }
        } else {
            if (isTableEmpty()) {
                JOptionPane.showMessageDialog(this, "Previous Data not opened", "Import Previous Data!", 0, null);
            }
        }
    }//GEN-LAST:event_storeBtnActionPerformed

    private void checkExpiration() {
        if (isTableEmpty()) {
            JOptionPane.showMessageDialog(this, "Previous Data not opened", "Import Previous Data!", 0, null);
        } else {
            DefaultComboBoxModel model = (DefaultComboBoxModel) expirationMonthComBox.getModel();
            for (int i = 0; i < stockInformationTable.getRowCount(); i++) {
                String[] dateFormat = getStringValueAt(i, 4).split("-");
                SimpleDateFormat ft = new SimpleDateFormat("dd-MM-yyyy");
                String input = dateFormat[0] + "-" + String.valueOf(model.getIndexOf(dateFormat[1])) + "-20" + dateFormat[2];
                Date exp;
                Date dNow = new Date();
                try {
                    exp = ft.parse(input);
                    if (exp.before(dNow)) {
                        stockInformationTable.addRowSelectionInterval(i, i);
                        stockInformationTable.setSelectionBackground(Color.red);
                    }
                } catch (ParseException e) {
                    System.out.println("Unparseable using " + ft);
                }
            }
        }
    }

    private void openMenuItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItmActionPerformed
        // the code below imports the specified .csv or .txt file data to the table
        if (!isTableEmpty()) {
            JOptionPane.showMessageDialog(this, "Data already Imported", "Already Opened", 0, null);
        } else {
            try {
                String filePath = "src/data.csv";
                File file = new File(filePath);
                if (!file.exists()) {
                    filePath = "src/data.txt";
                    file = new File(filePath);
                    if (!file.exists()) {
                        throw new FileNotFoundException();
                    }
                }
                BufferedReader br = new BufferedReader(new FileReader(filePath));
                Object[] tableLines = br.lines().toArray();
                for (int i = 0; i < tableLines.length; i++) {
                    String[] dataRows = tableLines[i].toString().trim().split(",");
                    for (int j = 0; j < dataRows.length; j++) {
                        switch (j) {
                            case 5:
                                setDoubleValueAt(dataRows[j], i, j);
                                break;
                            case 9:
                                setIntegerValueAt(dataRows[j], i, j);
                                break;
                            default:
                                setStringValueAt(dataRows[j], i, j);
                                break;
                        }
                    }
                }
                checkExpiration();
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "File not found at specified path \n src/data.csv \n or \n src/data.txt", "File Not Found!", 0, null);
            }
        }
    }//GEN-LAST:event_openMenuItmActionPerformed

    private void exitMenuItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItmActionPerformed
        // the code below closes the main window
        windowClosing(null);
    }//GEN-LAST:event_exitMenuItmActionPerformed

    private void newMenuItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuItmActionPerformed
        //the code below clears all the entered data along with the table contents
        clearBtnActionPerformed(null);
        DefaultTableModel model = (DefaultTableModel) stockInformationTable.getModel();
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        model.setRowCount(12);
    }//GEN-LAST:event_newMenuItmActionPerformed

    private void userManualMenuItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userManualMenuItmActionPerformed
        // the code below opens a user manual
        try {
            String filePath = "src/User Manual.pdf";
            File file = new File(filePath);
            if (!file.exists()) {
                throw new IOException();
            }
            Desktop.getDesktop().open(file);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "File not found at specified path \n src/User Manual.pdf", "File Not Found!", 0, null);
        }
    }//GEN-LAST:event_userManualMenuItmActionPerformed

    private void searchTxtFldMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchTxtFldMousePressed
        // the code below request the focus to searchTxtFld if the table is not empty
        if (isTableEmpty()) {
            searchTxtFld.setEditable(false);
        } else {
            searchTxtFld.setEditable(true);
            searchTxtFld.setFocusable(true);
            searchTxtFld.requestFocusInWindow();
        }
    }//GEN-LAST:event_searchTxtFldMousePressed

    private void searchRateRadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchRateRadBtnActionPerformed
        // the code below changes the state of searchTxtFld and seachComBox
        searchTxtFld.setText("");
        searchTxtFld.setVisible(true);
        searchComBox.setVisible(false);
        setSearch(0);
    }//GEN-LAST:event_searchRateRadBtnActionPerformed

    private void searchTypeRadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTypeRadBtnActionPerformed
        // the code below changes the state of searchTxtFld and seachComBox
        searchTxtFld.setText("");
        searchTxtFld.setVisible(false);
        searchComBox.setVisible(true);
        setSearch(0);
    }//GEN-LAST:event_searchTypeRadBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // the code below sorts the data and search for the specified value
        if (isTableEmpty()) {
            JOptionPane.showMessageDialog(this, "Import previous data to search", "Data Not Found!", 0, null);
        } else {
            MergeSorter m = new MergeSorter();
            BinarySearch b = new BinarySearch();
            int rowCount = stockInformationTable.getRowCount();
            int columnCount = stockInformationTable.getColumnCount();
            Object[][] rowData = new Object[rowCount][columnCount];
            for (int i = 0; i < rowCount; i++) {
                for (int j = 0; j < columnCount; j++) {
                    rowData[i][j] = getObjectValueAt(i, j);
                }
            }
            if (getSearchOption().equals("Rate") && !getSearch().isEmpty()) {
                rowData = m.mergeSort(rowData, 5);
                int foundIndex = b.binarySearch(rowData, 5, getSearch());
                if (foundIndex != -1) {
                    displayDetails(rowData, foundIndex);
                } else {
                    JOptionPane.showMessageDialog(this, "Searched Value Not Found", "Not Found!", 0, null);
                }
            } else if (!isSearchEmpty()) {
                rowData = m.mergeSort(rowData, 6);
                int foundIndex = b.binarySearch(rowData, 6, getSearchComBox());
                if (foundIndex != -1) {
                    displayDetails(rowData, foundIndex);
                } else {
                    JOptionPane.showMessageDialog(this, "Searched Value Not Found", "Not Found!", 0, null);
                }
            }
        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void exportMenuItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportMenuItmActionPerformed
        //the code below exports data from the table to the specified file path
        if (isTableEmpty()) {
            JOptionPane.showMessageDialog(this, "No data in the table to Export");
        } else {
            try {
                File file = new File("StockInformationData.txt");
                if (!file.exists()) {
                    file.createNewFile();
                }
                BufferedWriter bw = new BufferedWriter(new FileWriter(file));
                int rowCount = stockInformationTable.getRowCount();
                int columnCount = stockInformationTable.getColumnCount();
                for (int i = 0; i < rowCount; i++) {
                    if (!getStringValueAt(i, 0).isEmpty()) {
                        for (int j = 0; j < columnCount; j++) {
                            if (j < columnCount - 1) {
                                bw.write(getStringValueAt(i, j) + ",");
                            } else {
                                bw.write(getStringValueAt(i, j));
                            }
                        }
                    }
                    bw.newLine();
                }
                bw.close();
                JOptionPane.showMessageDialog(this, "Data Exported");
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_exportMenuItmActionPerformed

    private void sortBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortBtnActionPerformed
        // the code below sorts the table
        if (isTableEmpty()) {
            JOptionPane.showMessageDialog(this, "Please Insert Data Into Table To Sort", "Data Not Found!", 0, null);
        } else {
            MergeSorter m = new MergeSorter();
            int rowCount = stockInformationTable.getRowCount();
            int columnCount = stockInformationTable.getColumnCount();
            Object[][] rowData = new Object[rowCount][columnCount];
            for (int i = 0; i < rowCount; i++) {
                for (int j = 0; j < columnCount; j++) {
                    rowData[i][j] = getObjectValueAt(i, j);
                }
            }
            DefaultTableModel model = (DefaultTableModel) stockInformationTable.getModel();
            if (getSort().equals("Rate")) {
                rowData = m.mergeSort(rowData, 5);
            } else if (getSort().equals("Type")) {
                rowData = m.mergeSort(rowData, 6);
            }
            model.setNumRows(0);
            for (int i = 0; i < rowCount; i++) {
                model.addRow(new Object[]{null});
                for (int j = 0; j < columnCount; j++) {
                    setObjectValueAt(rowData[i][j], i, j);
                }
            }
        }
    }//GEN-LAST:event_sortBtnActionPerformed

    private void windowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowClosing
        // the code below asks the user whether to export the table data before closing
        if (!isTableEmpty()) {
            if (JOptionPane.showConfirmDialog(this, "Do you to export the data before closing?", "Close", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                exportMenuItmActionPerformed(null);
                System.exit(0);
            } else {
                System.exit(0);
            };
        } else {
            if (JOptionPane.showConfirmDialog(this, "Do you want to exit?", "Close", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                System.exit(0);
            }
        }
    }//GEN-LAST:event_windowClosing

    private void availabilityBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availabilityBtnActionPerformed
        // the code below checks for the quantity of categories available and show them to the user

        if (isTableEmpty()) {
            JOptionPane.showMessageDialog(this, "Import previous data to search", "Data Not Found!", 0, null);
        } else {
            int rowCount = stockInformationTable.getRowCount();
            ArrayList<Integer> usedRow = new ArrayList<Integer>();
            String[] type = new String[rowCount];
            if (availabilityComBox.getSelectedIndex() != 0) {
                for (int i = 0; i < rowCount; i++) {
                    type[i] = getStringValueAt(i, 6);
                }
                for (int j = 0; j < rowCount; j++) {
                    if (availabilityComBox.getSelectedItem().equals(getStringValueAt(j, 6)) && !usedRow.contains(j)) {
                        usedRow.add(j);
                    }
                }
                if (usedRow.size() == 0) {
                    JOptionPane.showMessageDialog(this, "Out of Stock", "Stock Empty", 0, null);
                } else {
                    String quantityAvailability = "";
                    int totalQuantity = 0;
                    for (int value : usedRow) {
                        quantityAvailability += "Drug ID: " + getStringValueAt(value, 0) + " , Drug Name: " + getStringValueAt(value, 1) + " , Quantity: " + getStringValueAt(value, 9) + " Units\n";
                        totalQuantity += Integer.parseInt(getStringValueAt(value, 9));
                    }
                    quantityAvailability += "Drug Type: " + availabilityComBox.getSelectedItem() + " , Total Quantity: " + totalQuantity + " Units";
                    JOptionPane.showMessageDialog(this, quantityAvailability, "Category Availability", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_availabilityBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // the code below deleted the selected row from the table
        if (isTableEmpty()) {
            JOptionPane.showMessageDialog(this, "Import previous data to search", "Data Not Found!", 0, null);
        } else {
            DefaultTableModel model = (DefaultTableModel) stockInformationTable.getModel();
            if (stockInformationTable.getSelectedRow() != -1) {
                // remove selected row from the model
                model.removeRow(stockInformationTable.getSelectedRow());
                JOptionPane.showMessageDialog(this, "Selected row deleted successfully");
            }
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        // TODO add your handling code here:
        checkExpiration();
    }//GEN-LAST:event_refreshBtnActionPerformed

    private void displayDetails(Object[][] rowData, int row) {
        //the code below displays details of the row
        JOptionPane.showMessageDialog(this,
                "Drug ID: " + rowData[row][0] + "\n"
                + "Drug Name: " + rowData[row][1] + "\n"
                + "Company: " + rowData[row][2] + "\n"
                + "Manufactured: " + rowData[row][3] + "\n"
                + "Expiration: " + rowData[row][4] + "\n"
                + "Rate: " + rowData[row][5] + "\n"
                + "Type: " + rowData[row][6] + "\n"
                + "Status: " + rowData[row][7] + "\n"
                + "Sales: " + rowData[row][8] + "\n"
                + "Quantity: " + rowData[row][9], "Details",
                JOptionPane.INFORMATION_MESSAGE);
    }

    private Object getObjectValueAt(int row, int column) {
        //the code below returns object from the row colum in the table
        return stockInformationTable.getValueAt(row, column);
    }

    private String getStringValueAt(int row, int column) {
        //the code below returns the String at the row column from the table
        return stockInformationTable.getValueAt(row, column).toString().trim();
    }

    private void setObjectValueAt(Object value, int row, int column) {
        // the code below sets object value at row column in the table
        stockInformationTable.setValueAt(value, row, column);
    }

    private void setStringValueAt(String value, int row, int column) {
        // the code below sets string value at row column in the table
        stockInformationTable.setValueAt(value, row, column);
    }

    private void setIntegerValueAt(String value, int row, int column) {
        // the code below sets integer value at row column in the table
        stockInformationTable.setValueAt(Integer.parseInt(value), row, column);
    }

    private Double getDoubleValueAt(int row, int column) {
        //the code below returns double value from the specified row column in the table
        return Double.parseDouble(stockInformationTable.getValueAt(row, column).toString().trim());
    }

    private void setDoubleValueAt(String value, int row, int column) {
        // the code below sets double value at row column in the table
        stockInformationTable.setValueAt(Double.parseDouble(value), row, column);
    }

    private void changeCurrencyExchangeState(int index, boolean txtFld, boolean comBox) {
        //the code below changes the state of currency exchange rate combobox and textfield
        currencyExchangeRateComBox.setSelectedIndex(index);
        currencyExchangeRateTxtFld.setVisible(txtFld);
        currencyExchangeRateComBox.setVisible(comBox);
        currencyExchangeRateTxtFld.setText("");
    }

    private boolean isTableEmpty() {
        //the code below checks if the table is empty or not
        boolean tableEmpty = true;
        if (stockInformationTable.getValueAt(0, 0) != null) {
            tableEmpty = false;
        }
        return tableEmpty;
    }

    private String getDrugId() {
        //the code below returns text from drugIdTxtFld
        return drugIdTxtFld.getText().trim();
    }

    private void setDrugId(String drugId) {
        //the code below sets text to drugIdTxtFld
        drugIdTxtFld.setText(drugId.trim());
    }

    private String getDrugName() {
        //the code below returns text from drugNameTxtFld
        return drugNameTxtFld.getText().trim();
    }

    private void setDrugName(String drugName) {
        //the code below sets text to drugNameTxtFld
        drugNameTxtFld.setText(drugName.trim());
    }

    private String getCompany() {
        //the code below returns text from companyTxtFld
        return companyTxtFld.getText().trim();
    }

    private void setCompany(String company) {
        //the code below sets text to companyTxtFld
        companyTxtFld.setText(company.trim());
    }

    private String getManufacturedDay() {
        //the code below returns the manufactured day
        return manufacturedDayComBox.getItemAt(manufacturedDayComBox.getSelectedIndex());
    }

    private void setManufacturedDay(int index) {
        //the code below sets the manufactured day
        manufacturedDayComBox.setSelectedIndex(index);
    }

    private int getManufacturedMonth() {
        //the code below returns the manufactured month
        //return manufacturedMonthComBox.getItemAt(manufacturedMonthComBox.getSelectedIndex());
        return manufacturedMonthComBox.getSelectedIndex();
    }

    private void setManufacturedMonth(int index) {
        //the code below sets the manufactured month
        manufacturedMonthComBox.setSelectedIndex(index);
    }

    private String getManufacturedYear() {
        //the code below returns the manufactured year
        return manufacturedYearComBox.getItemAt(manufacturedYearComBox.getSelectedIndex());
    }

    private void setManufacturedYear(int index) {
        //the code below sets the manufactured year
        manufacturedYearComBox.setSelectedIndex(index);
    }

    private String getExpirationDay() {
        //the code below returns the expiration day
        return expirationDayComBox.getItemAt(expirationDayComBox.getSelectedIndex());
    }

    private void setExpirationDay(int index) {
        //the code below sets the expiration day
        expirationDayComBox.setSelectedIndex(index);
    }

    private int getExpirationMonth() {
        //the code below returns the expiration month
        //return expirationMonthComBox.getItemAt(expirationMonthComBox.getSelectedIndex());
        return expirationMonthComBox.getSelectedIndex();
    }

    private void setExpirationMonth(int index) {
        //the code below sets the expiration month
        expirationMonthComBox.setSelectedIndex(index);
    }

    private String getExpirationYear() {
        //the code below returns the expiration year
        return expirationYearComBox.getItemAt(expirationYearComBox.getSelectedIndex());
    }

    private void setExpirationYear(int index) {
        //the code below sets the expiration year
        expirationYearComBox.setSelectedIndex(index);
    }

    private boolean isManufacturedEmpty() {
        //the code below checks if the Manufactured is empty or not
        boolean manufacturedEmpty = true;
        if (manufacturedDayComBox.getSelectedIndex() != 0 && manufacturedMonthComBox.getSelectedIndex() != 0 && manufacturedYearComBox.getSelectedIndex() != 0) {
            manufacturedEmpty = false;
        }
        return manufacturedEmpty;
    }

    private boolean isExpirationEmpty() {
        //the code below checks it the Expiration is empty or not
        boolean expirationEmpty = true;
        if (expirationDayComBox.getSelectedIndex() != 0 && expirationMonthComBox.getSelectedIndex() != 0 && expirationYearComBox.getSelectedIndex() != 0) {
            expirationEmpty = false;
        }
        return expirationEmpty;
    }

    private String getStatus() {
        //the code below returns the status selected
        return statusBtnGrp.getSelection().getActionCommand();
    }

    private boolean isStatusEmpty() {
        //the code below checks if the Status is empty or not
        boolean statusEmpty = true;
        if (sampleRadBtn.isSelected() || regularRadBtn.isSelected()) {
            statusEmpty = false;
        }
        return statusEmpty;
    }

    private String getQuantity() {
        //the code below returns the text from quantityTxtFld
        return quantityTxtFld.getText().trim();
    }

    private String getMarketPrice() {
        //the code below returns the market price
        return marketPriceTxtFld.getText().trim();
    }

    private String getCurrency() {
        //the code below returns selected currency
        return currencyBtnGrp.getSelection().getActionCommand();
    }

    private void setCurrency(JRadioButton currency) {
        // the code below sets the currency selected
        currencyBtnGrp.clearSelection();
        currency.setSelected(true);
    }

    private void setCurrencyExchangeRate(int index) {
        // the code below sets the value selected in the currencyExchnageRateComBox
        currencyExchangeRateComBox.setSelectedIndex(index);
    }

    private String getRate() {
        //the code below returns the text from rateTxtFld
        return rateTxtFld.getText().trim();
    }

    private String getTypes() {
        //the code below returns the type selected
        return typeComBox.getItemAt(typeComBox.getSelectedIndex());
    }

    private void setType(int index) {
        typeComBox.setSelectedIndex(index);
    }

    private boolean isTypeEmpty() {
        //the code below checks if the Type is empty or not
        boolean typeEmpty = true;
        if (typeComBox.getSelectedIndex() != 0) {
            typeEmpty = false;
        }
        return typeEmpty;
    }

    private String getSales() {
        //the code below returns the text from salesTxtFld
        String sales = "";
        boolean isInternational = internationalChkBox.isSelected();
        boolean isNationwide = nationwideChkBox.isSelected();
        boolean isLocal = localChkBox.isSelected();
        if (isInternational) {
            sales = salesValue(internationalChkBox);
            if (isNationwide) {
                sales = sales + "+" + salesValue(nationwideChkBox);
                if (isLocal) {
                    sales = sales + "+" + salesValue(localChkBox);
                }
            } else {
                if (isLocal) {
                    sales = sales + "+" + salesValue(localChkBox);
                }
            }
        } else if (isNationwide) {
            sales = salesValue(nationwideChkBox);
            if (isLocal) {
                sales = sales + "+" + salesValue(localChkBox);
            }
        } else {
            sales = salesValue(localChkBox);
        }
        return sales;
    }

    private String salesValue(JCheckBox sales) {
        //the code below returns the first letter of the cvalue of sales checkbox selected
        return sales.getText().trim().substring(0, 1);
    }

    private void setSales(JCheckBox sales, boolean selected) {
        // the code below sets the sales value
        sales.setSelected(selected);
    }

    private boolean isSalesEmpty() {
        //the code below checks it the Sales is empty or not
        boolean salesEmpty = true;
        if (internationalChkBox.isSelected() || nationwideChkBox.isSelected() || localChkBox.isSelected()) {
            salesEmpty = false;
        }
        return salesEmpty;
    }

    private String getSearch() {
        //the code below returns the text from serachTxtFld
        String search = searchTxtFld.getText();
        if (search.isEmpty()) {
            return search;
        } else {
            return (Double.valueOf(search)).toString().trim();
        }
    }

    private String getSearchComBox() {
        //the code below returns the value selected in search combobox
        return searchComBox.getSelectedItem().toString().trim();
    }

    private void setSearch(int index) {
        // the code below sets the value of search selected
        searchComBox.setSelectedIndex(index);
    }

    private String getSearchOption() {
        //the code below returns the search option selection
        return searchBtnGrp.getSelection().getActionCommand();
    }

    private void setSearchOption(JRadioButton search) {
        // the code below sets the value of search option selected
        searchBtnGrp.clearSelection();
        search.setSelected(true);
    }

    private boolean isSearchEmpty() {
        //the code below checks if the Search is empty or not
        boolean searchEmpty = true;
        if (searchComBox.getSelectedIndex() != 0) {
            searchEmpty = false;
        }
        return searchEmpty;
    }

    private String getSort() {
        //the code below returns the sort button selected
        return sortBtnGrp.getSelection().getActionCommand();
    }

    private void setSort(JRadioButton sort) {
        // the code below sets the sort option selected
        sortBtnGrp.clearSelection();
        sort.setSelected(true);
    }

    private void clearValidationWarning() {
        //the code below removes all the data required validation warning
        drugIdValidLbl.setText("");
        drugNameValidLbl.setText("");
        companyValidLbl.setText("");
        manufacturedValidLbl.setText("");
        expirationValidLbl.setText("");
        statusValidLbl.setText("");
        quantityValidLbl.setText("");
        marketPriceValidLbl.setText("");
        currencyExchangeRateValidLbl.setText("");
        typeValidLbl.setText("");
        salesValidLbl.setText("");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PharmaceuticalInfo.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PharmaceuticalInfo.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PharmaceuticalInfo.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PharmaceuticalInfo.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PharmaceuticalInfo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton availabilityBtn;
    private javax.swing.JComboBox<String> availabilityComBox;
    private javax.swing.JButton clearBtn;
    private javax.swing.JLabel companyLbl;
    private javax.swing.JTextField companyTxtFld;
    private javax.swing.JLabel companyValidLbl;
    private javax.swing.ButtonGroup currencyBtnGrp;
    private javax.swing.JComboBox<String> currencyExchangeRateComBox;
    private javax.swing.JLabel currencyExchangeRateLbl;
    private javax.swing.JTextField currencyExchangeRateTxtFld;
    private javax.swing.JLabel currencyExchangeRateValidLbl;
    private javax.swing.JLabel currencyLbl;
    private javax.swing.JPanel currencyPanel;
    private javax.swing.JLabel dashboardLbl;
    private javax.swing.JPanel dashboardPanel;
    private javax.swing.JPanel dashboardTab;
    private javax.swing.JPanel dataEntryFirstInfoPanel;
    private javax.swing.JLabel dataEntryLbl;
    private javax.swing.JPanel dataEntryPanel;
    private javax.swing.JPanel dataEntrySecondInfoPanel;
    private javax.swing.JPanel dataEntryTab;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JLabel drugIdLbl;
    private javax.swing.JTextField drugIdTxtFld;
    private javax.swing.JLabel drugIdValidLbl;
    private javax.swing.JLabel drugNameLbl;
    private javax.swing.JTextField drugNameTxtFld;
    private javax.swing.JLabel drugNameValidLbl;
    private javax.swing.JLabel drugTypeAvailabilityLbl;
    private javax.swing.JMenuItem exitMenuItm;
    private javax.swing.JComboBox<String> expirationDayComBox;
    private javax.swing.JLabel expirationLbl;
    private javax.swing.JComboBox<String> expirationMonthComBox;
    private javax.swing.JPanel expirationPanel;
    private javax.swing.JLabel expirationValidLbl;
    private javax.swing.JComboBox<String> expirationYearComBox;
    private javax.swing.JMenuItem exportMenuItm;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPanel firstGapPanel;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JRadioButton inrRadBtn;
    private javax.swing.JCheckBox internationalChkBox;
    private javax.swing.JPanel lastGapPanel;
    private javax.swing.JCheckBox localChkBox;
    private javax.swing.JComboBox<String> manufacturedDayComBox;
    private javax.swing.JLabel manufacturedLbl;
    private javax.swing.JComboBox<String> manufacturedMonthComBox;
    private javax.swing.JPanel manufacturedPanel;
    private javax.swing.JLabel manufacturedValidLbl;
    private javax.swing.JComboBox<String> manufacturedYearComBox;
    private javax.swing.JLabel marketPriceLbl;
    private javax.swing.JTextField marketPriceTxtFld;
    private javax.swing.JLabel marketPriceValidLbl;
    private javax.swing.JPopupMenu.Separator menuItmSeparator1;
    private javax.swing.JPopupMenu.Separator menuItmSeparator2;
    private javax.swing.JPopupMenu.Separator menuItmSeparator3;
    private javax.swing.JPanel middleGapPanel;
    private javax.swing.JCheckBox nationwideChkBox;
    private javax.swing.JMenuItem newMenuItm;
    private javax.swing.JRadioButton nrsRadBtn;
    private javax.swing.JMenuItem openMenuItm;
    private javax.swing.JRadioButton otherRadBtn;
    private javax.swing.JLabel quantityLbl;
    private javax.swing.JTextField quantityTxtFld;
    private javax.swing.JLabel quantityValidLbl;
    private javax.swing.JLabel rateLbl;
    private javax.swing.JTextField rateTxtFld;
    private javax.swing.JLabel rateValidLbl;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JRadioButton regularRadBtn;
    private javax.swing.JLabel salesLbl;
    private javax.swing.JPanel salesPanel;
    private javax.swing.JLabel salesValidLbl;
    private javax.swing.JRadioButton sampleRadBtn;
    private javax.swing.JButton searchBtn;
    private javax.swing.ButtonGroup searchBtnGrp;
    private javax.swing.JLabel searchByLbl;
    private javax.swing.JComboBox<String> searchComBox;
    private javax.swing.JLabel searchLbl;
    private javax.swing.JRadioButton searchRateRadBtn;
    private javax.swing.JPanel searchSortPanel;
    private javax.swing.JTextField searchTxtFld;
    private javax.swing.JRadioButton searchTypeRadBtn;
    private javax.swing.JPanel sidePanel;
    private javax.swing.JPanel sideTabPanel;
    private javax.swing.JButton sortBtn;
    private javax.swing.ButtonGroup sortBtnGrp;
    private javax.swing.JLabel sortByLbl;
    private javax.swing.JRadioButton sortRateRadBtn;
    private javax.swing.JRadioButton sortTypeRadBtn;
    private javax.swing.ButtonGroup statusBtnGrp;
    private javax.swing.JLabel statusLbl;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JLabel statusValidLbl;
    private javax.swing.JTable stockInformationTable;
    private javax.swing.JScrollPane stockInformationTableScrollPane;
    private javax.swing.JButton storeBtn;
    private javax.swing.JPanel storeClearBtnPanel;
    private javax.swing.JPanel tableDisplayPanel;
    private javax.swing.JLabel titleLbl;
    private javax.swing.JSeparator titleSeparator;
    private javax.swing.JPanel topHeadingPanel;
    private javax.swing.JMenuBar topMenuBar;
    private javax.swing.JComboBox<String> typeComBox;
    private javax.swing.JLabel typeLbl;
    private javax.swing.JLabel typeValidLbl;
    private javax.swing.JLabel unitsLbl;
    private javax.swing.JRadioButton usdRadBtn;
    private javax.swing.JMenuItem userManualMenuItm;
    private javax.swing.JPanel viewerPanel;
    // End of variables declaration//GEN-END:variables
}
